package com.project.jaja.fleetcommander;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

import java.util.ArrayList;


/**
 * Written by avnishjain
 *
 * This class incorporates the View, and therefore
 * the rendering and UI aspects of the game.
 */
public class GameView extends SurfaceView {

    //Bitmap that captures the image of the ship
    private Bitmap map;

    //Surface holder that holds everything together
    private SurfaceHolder surfaceHolder;

    //Thread that holds the game loop logic
    private GameLoopThread thread;

    //List of all the instantiated ships
    private ArrayList<ShipSprite> ships;

    //Integer value holding the number of ships created
    private int numShips;

    private long lastClick;


    /**
     * Constructor of the view
     * @param context -> Context of the game which comes from NewGameActivity
     */
    public GameView(Context context){
        super(context);

        //Creates the tread
        thread = new GameLoopThread(this);

        ships = new ArrayList<ShipSprite>();
        numShips = 0;
        surfaceHolder = getHolder();
        surfaceHolder.addCallback(new SurfaceHolder.Callback() {

            /**
             *  When the surface is created when the game is about the begin
             * @param holder --> The holder that holds everything together
             */
            @Override
            public void surfaceCreated(SurfaceHolder holder) {

                //Creates all the ships
                populateShips();

                //Starts the thread and game loop
                thread.setGameState(true);
                thread.start();
            }

            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
                /*Does nothing yet*/
            }

            /**
             *  When the game is exited, this method is called
             * @param holder  --> The holder that holds everything together
             */
            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {

                //when the surface is destroyed, try restarting
                //thread if in case the orientation of the screen has
                //changed
                boolean test = true;
                thread.setGameState(false);
                while (test) {
                    try {
                        //closes the last active thread and starts a new thread if possible
                        thread.join();
                        test = false;
                    } catch (InterruptedException e) {
                        /* Do nothing */
                    }
                }


            }
        });


    }

    /**
     *  Method call that populates the ArrayList.
     *  Method allows for the multiple ships to be created in
     *  one place
     */
    protected void populateShips(){
        ships.add(newShip(R.drawable.player_ship));
        //ships.add(newShip(R.drawable.player_ship));
        //ships.add(newShip(R.drawable.player_ship));
    }

    /**
     *  Creates a sprite of a ship
     *
     * @param drawable --> R.drawable.id that is generated by Android
     * @return the Sprite of the ship
     */
    protected ShipSprite newShip(int drawable){
        //sets the image of the ship to the one specified
        map = BitmapFactory.decodeResource(getResources(), drawable);

        //Creates the new ship at the specified location
        ShipSprite newShip = new ShipSprite(this, map, (numShips * 110)+30, 10);
        numShips++;
        return newShip;
    }

    /**
     * Handles all the rendering of the view
     *
     * @param canvas -> Canvas to render images on
     */
    protected void onDraw(Canvas canvas){
        //Sets the background to the RGB Value
        canvas.drawColor(Color.rgb(0,153,204));

        Paint paint = new Paint();
        paint.setColor(Color.WHITE);
        paint.setStrokeWidth(3);
        paint.setStyle(Paint.Style.STROKE);



        //Abstract to a function and potentially in the wrong place (should be in ShipSprite)
        //If the ship bounces of an edge it changes direction
        for(ShipSprite ship : ships){
            //gets the image needed to be displayed based on the direction
            int resourceID = ship.getDirectionID(ship.getDirection());
            //sets the image of the ship to the specified image
            ship.setMap(BitmapFactory.decodeResource(getResources(), resourceID));

            //draws the ship onto the canvas
            ship.onDraw(canvas);
            if(ship.getPath().isEmpty() == false) {
                canvas.drawPath(ship.getPath(), paint);
            }
        }






    }

    /**
     * Method used when a ship is tapped on
     * Currently it is just removed from rendering, but this one was for
     * debugging principles. It is not the main function of the game
     *
     * @param event --> Touch event
     * @return --> Boolean if there has been a touch or not
     */
    @Override
    public boolean onTouchEvent(MotionEvent event) {

        if (System.currentTimeMillis() - lastClick > 300) {
        lastClick = System.currentTimeMillis();
            synchronized (getHolder()) {
                //runs through all the ships in the array and checks to see
                //if the touch points are in the image of the ship
                for (ShipSprite ship : ships) {
                    if (ship.isColliding(event.getX(), event.getY())) {
                        //Do something with the ships here
                        ship.changeShipSelect(ship.isShipSelect());
                        int resourceID = ship.getDirectionID(ship.getDirection());
                        ship.setMap(BitmapFactory.decodeResource(getResources(), resourceID));
                        break;
                    }
                }
            }

        }
        //return true;
        for(ShipSprite ship:ships) {
                if(event.getAction() == event.ACTION_DOWN) {
                    // init the list every time a new touchDown is registered
                    if(ship.isShipSelect() == true) {
                        ship.setShipSelect(true);
                        ship.getxCoords().clear();
                        ship.getyCoords().clear();
                    }
                    break;
                }
                if(event.getAction() == event.ACTION_MOVE) {
                    // while moving, store all touch points in the lists
                    if(ship.isShipSelect() == true) {
                        ship.getxCoords().add((int) event.getX());
                        ship.getyCoords().add((int) event.getY());
                    }
                    break;
                }
                if(event.getAction() == event.ACTION_UP) {
                    // when the event is finished, create the path and make the sprite move
                    // instead of the history size use the size of your own lists
                    ship.setPath( new Path() );
                    if (ship.getxCoords().size() > 0){
                        ship.getPath().moveTo(ship.getxCoords().get(0), ship.getyCoords().get(0));
                        for (int i = 1; i < ship.getxCoords().size(); i++) {
                            ship.getPath().lineTo(ship.getxCoords().get(i), ship.getyCoords().get(i));
                        }
                    }
                    break;
                }
            }

        return true;
    }



}